#!/usr/bin/env bash

# ---------------------------------------------
# bitcoin_fallback.sh
# Script para verificar a conex√£o com o node Bitcoin Core principal
# e realizar fallback para um node backup, ajustando a configura√ß√£o do LND.
# Utiliza curl para testar a conex√£o RPC, n√£o requer bitcoin-cli local.
# ---------------------------------------------

# Habilita modos de erro estritos
set -euo pipefail

# --------------------------------------------------------------------------------
# Resolve symlinks e pega o diret√≥rio real do script
# --------------------------------------------------------------------------------
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"

# --- Define diret√≥rios baseados na localiza√ß√£o do script ---
BIN_DIR="$SCRIPT_DIR"
PROJECT_ROOT="$(dirname "$BIN_DIR")"
CONFIG_DIR="$PROJECT_ROOT/config"

# --- Fun√ß√µes Auxiliares ---
TIMESTAMP() { date                      '+%Y-%m-%d %H:%M:%S'; }
log_error() { echo "[$(TIMESTAMP)] ERRO: $*" | tee -a "$LOG_FILE" >&2; }
log_info() { echo "[$(TIMESTAMP)] INFO: $*" | tee -a "$LOG_FILE"; }

# --- Carrega configura√ß√µes e valida ---
CONFIG_FILE="$CONFIG_DIR/config.ini"
if [ ! -f "$CONFIG_FILE" ]; then
  # N√£o podemos logar no arquivo de log padr√£o ainda
  echo "[$(date                         '+%Y-%m-%d %H:%M:%S')] ERRO: Arquivo de configura√ß√£o '$CONFIG_FILE' n√£o encontrado." >&2
  exit 1
fi

# Carrega diret√≥rios e arquivos de configura√ß√£o
LND_DIR=$(crudini --get "$CONFIG_FILE" General LND_DIR 2>/dev/null || echo "")
LOG_FILE="${LND_DIR}/lnd_fallback.log" # Nome de log mais espec√≠fico
STATE_FILE="$CONFIG_DIR/.fallback_state"

# Valida se LND_DIR foi carregado
if [ -z "$LND_DIR" ]; then
    # Tenta criar um log tempor√°rio se LND_DIR falhar
    LOG_FILE="/tmp/lnd_fallback_error.log"
    log_error "LND_DIR n√£o definido na se√ß√£o [General] de '$CONFIG_FILE'."
    exit 1
fi

# Cria o diret√≥rio de log se n√£o existir
mkdir -p "$(dirname "$LOG_FILE")"

# Carrega detalhes de conex√£o e credenciais RPC do node PRINCIPAL
BITCOIN_RPC_HOST=$(crudini --get "$CONFIG_FILE" bitcoin_fallback BITCOIN_RPC_HOST 2>/dev/null || echo "")
BITCOIN_RPC_PORT=$(crudini --get "$CONFIG_FILE" bitcoin_fallback BITCOIN_RPC_PORT 2>/dev/null || echo "")
BITCOIN_RPC_USER=$(crudini --get "$CONFIG_FILE" bitcoin_fallback BITCOIN_RPC_USER 2>/dev/null || echo "")
BITCOIN_RPC_PASS=$(crudini --get "$CONFIG_FILE" bitcoin_fallback BITCOIN_RPC_PASS 2>/dev/null || echo "")

# Valida se os detalhes de conex√£o e credenciais RPC foram carregados
if [ -z "$BITCOIN_RPC_HOST" ] || [ -z "$BITCOIN_RPC_PORT" ] || [ -z "$BITCOIN_RPC_USER" ] || [ -z "$BITCOIN_RPC_PASS" ]; then
    log_error "Detalhes de conex√£o incompletos (BITCOIN_RPC_HOST, BITCOIN_RPC_PORT, BITCOIN_RPC_USER, BITCOIN_RPC_PASS) na se√ß√£o [bitcoin_fallback] de '$CONFIG_FILE'."
    exit 1
fi

# Carrega script de notifica√ß√£o
# shellcheck source=./notify.sh
source "$BIN_DIR/notify.sh"

# --- L√≥gica Principal ---

# 1) L√™ estado atual (principal|backup); default=principal
CURRENT_STATE="principal" # Assume principal se o arquivo n√£o existir
if [ -f "$STATE_FILE" ]; then
    CURRENT_STATE=$(<"$STATE_FILE")
fi

# 2) Fun√ß√£o para verificar a conex√£o com o Bitcoin Core Principal via curl
check_bitcoin_connection() {
    local rpc_url="http://$BITCOIN_RPC_HOST:$BITCOIN_RPC_PORT/"
    local rpc_user_pass="$BITCOIN_RPC_USER:$BITCOIN_RPC_PASS"
    local json_payload='{"jsonrpc": "1.0", "id":"fallback_check", "method": "getblockchaininfo", "params": [] }'

    # Usa curl para fazer a chamada RPC com timeout
    # Verifica o c√≥digo de sa√≠da do curl E se a resposta cont√©m "result" (indicativo de sucesso RPC)
    # O timeout √© aplicado √† conex√£o (--connect-timeout) e ao tempo total da opera√ß√£o (-m)
    local response
    response=$(curl --silent --fail \
                    --connect-timeout 5 -m 10 \
                    --user "$rpc_user_pass" \
                    --data-binary "$json_payload" \
                    -H 'content-type: text/plain;' "$rpc_url")

    # Verifica se a resposta cont√©m um campo "result"
    if echo "$response" | grep -q '"result"'; then
        return 0
    else
        return 1
    fi
}

# 3) Fun√ß√£o de troca de estado: copia conf, notifica e reinicia servi√ßos
switch_state() {
    local new_state=$1
    local old_state=$CURRENT_STATE
    local lnd_conf_source="$CONFIG_DIR/lnd.$new_state.conf"
    local lnd_conf_target="$LND_DIR/lnd.conf"

    log_info "Iniciando troca de estado de '$old_state' para '$new_state'."

    # Notifica a troca
    notify "üîÑ LND Fallback: Iniciando a troca do node bitcoin $old_state para o $new_state."

    # Verifica se o arquivo de configura√ß√£o de origem existe
    if [ ! -f "$lnd_conf_source" ]; then
        log_error "Arquivo de configura√ß√£o '$lnd_conf_source' n√£o encontrado! Abortando troca."
        notify "üö® ERRO Fallback: Arquivo '$lnd_conf_source' n√£o encontrado!"
        exit 1
    fi

    # Copia a configura√ß√£o correspondente
    if cp "$lnd_conf_source" "$lnd_conf_target"; then
        log_info "Arquivo '$lnd_conf_target' atualizado com a configura√ß√£o '$new_state'."
    else
        log_error "Falha ao copiar '$lnd_conf_source' para '$lnd_conf_target'. Verifique permiss√µes. Abortando troca."
        notify "üö® ERRO Fallback: Falha ao copiar config '$new_state'."
        exit 1
    fi

    # Atualiza o arquivo de estado
    if echo "$new_state" > "$STATE_FILE"; then
        log_info "Arquivo de estado '$STATE_FILE' atualizado para '$new_state'."
    else
        log_error "Falha ao atualizar arquivo de estado '$STATE_FILE'. Verifique permiss√µes."
        # N√£o aborta necessariamente, mas loga o erro.
    fi

    # Reinicia o LND via systemd
    log_info "Reiniciando LND (lnd.service)..."
    if systemctl restart --ignore-dependencies lnd.service; then
        log_info "LND reiniciado com sucesso usando configura√ß√£o '$new_state'."
        notify "‚úÖ LND Fallback: LND reiniciado com sucesso."
        exit 0 # Sai ap√≥s a troca bem-sucedida
    else
        log_error "Falha ao reiniciar lnd.service! Verifique os logs do LND e do systemd."
        notify "üö® ERRO Fallback: Falha ao reiniciar LND ap√≥s trocar para '$new_state'!"
        exit 1 # Sai com erro se o LND n√£o reiniciar
    fi

    sleep 5 # Aguarda um pouco antes de reiniciar os demais Servi√ßos

    # Reinicia servi√ßos dependentes individualmente, se existirem e estiverem ativos
    log_info "Verificando e reiniciando servi√ßos dependentes..."

    local services_to_check=("lndg" "lndg-controller" "thunderhub" "bos-telegram")
    local restarted_services=()
    for service in "${services_to_check[@]}"; do
        if systemctl is-active --quiet "$service"; then
            log_info "Servi√ßo '$service' est√° ativo. Tentando reiniciar..."
            if systemctl restart "$service"; then
                log_info "'$service' reiniciado com sucesso."
                restarted_services+=("$service")
            else
                log_error "Falha ao enviar comando de rein√≠cio para '$service'. Verifique os logs do systemd."
            fi
        else
            log_info "Servi√ßo '$service' n√£o encontrado ou n√£o est√° ativo. Pulando rein√≠cio."
        fi
    done

    # Monta uma √∫nica mensagem com os servi√ßos que foram reiniciados
    if [ ${#restarted_services[@]} -gt 0 ]; then
        notify "‚úÖ LND Fallback: Servi√ßos reiniciados: ${restarted_services[*]}"
    else
        notify "‚ö†Ô∏è LND Fallback: Nenhum servi√ßo foi reiniciado (n√£o estavam ativos ou n√£o encontrados)."
    fi
}

# 4) Executa a verifica√ß√£o e decide se troca o estado
if check_bitcoin_connection; then
    # Conex√£o OK: Verifica se precisa voltar para o principal
    if [ "$CURRENT_STATE" != "principal" ]; then
        log_info "Conex√£o com node principal restaurada. Voltando para 'principal'."
        switch_state "principal"
    fi
else
    # Conex√£o Falhou: Verifica se precisa ir para o backup
    if [ "$CURRENT_STATE" != "backup" ]; then
        log_info "Conex√£o com node principal falhou. Trocando para 'backup'."
        switch_state "backup"
    fi
fi
exit 0
